{"version":3,"sources":["PassForm.js","App.js","serviceWorker.js","index.js"],"names":["PassForm","state","length","special","exclude","handleLengthChange","e","setState","target","value","handleSpecialChange","handleExcludeChange","handleSubmit","preventDefault","props","passGen","onSubmit","this","type","min","max","placeholder","onChange","pattern","className","Component","App","password","error","shuffle","str","a","split","i","j","Math","floor","random","tmp","join","copyToClipboard","textArea","select","document","execCommand","renderPass","pass","readOnly","ref","renderError","values","upper","lower","digits","parseInt","isNaN","c","replace","charAt","randrange","numOtherChars","index","shuffled","range","requestBytes","ceil","log2","maxNum","pow","ar","Uint8Array","window","crypto","getRandomValues","val","queryCommandSupported","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c225e6f4.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass PassForm extends Component {\n    state = {\n        length: '',\n        special: '',\n        exclude: ''\n    }\n\n    handleLengthChange = (e) => {\n        this.setState({\n            length: e.target.value,\n            special: this.state.special,\n            exclude: this.state.exclude\n        })\n    }\n\n    handleSpecialChange = (e) => {\n        this.setState({\n            length: this.state.length,\n            special: e.target.value,\n            exclude: this.state.exclude\n        })\n    }\n    handleExcludeChange = (e) => {\n        this.setState({\n            length: this.state.length,\n            special: this.state.special,\n            exclude: e.target.value\n        })\n    }\n\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.passGen(this.state.length, this.state.special, this.state.exclude);\n    }\n    render() {\n        return (\n            <div>  \n                <form onSubmit={this.handleSubmit}>\n                    <input type=\"number\" min=\"10\" max=\"1000\" placeholder=\"16\" onChange={this.handleLengthChange} value={this.state.length}/> \n                    <label>Password length (10-1000):</label>\n\n                    <input type=\"text\" pattern=\"[\\W_]*\" placeholder=\"!@#$%^*_|\" onChange={this.handleSpecialChange} value={this.state.special}/> \n                    <label>Special characters to include. Special characters can be any characters that are not digits or letters; enter as string sequence, for example, #!@:</label>\n\n                    <input type=\"text\" onChange={this.handleExcludeChange} value={this.state.exclude}/> \n                    <label>Characters to exclude; enter as string sequence, for example, Aa%:</label>\n\n                    <br></br><br></br>\n                    <button className=\"btn orange darken-3\" type=\"submit\" value=\"Submit\">\n                        Generate <i className=\"material-icons right\">send</i>\n                    </button>\n                </form>  \n            </div>\n        );\n    }\n}\n\nexport default PassForm","import React, {Component} from 'react';\nimport PassForm from './PassForm';\n\nclass App extends Component {\n  state = {\n    password: '',\n    error: ''\n  }\n\n  shuffle = (str) => {\n    var a = str.split(\"\"),\n        n = a.length;\n  \n    for(var i = n - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var tmp = a[i];\n        a[i] = a[j];\n        a[j] = tmp;\n    }\n    return a.join(\"\");\n  }\n\n  copyToClipboard = (e) => {\n    this.textArea.select();\n    document.execCommand('copy');\n    // If you prefer to not show the the whole text area selected.\n    //e.target.focus();\n  };\n  \n  renderPass = (pass) => {\n      return pass? \n        <textarea className=\"materialize-textarea\" readOnly ref={(textArea) => this.textArea = textArea} value= {pass} /> : null\n  }\n  renderError = (error) => {\n    return error? <p>{error}</p>: null\n  }\n\n  // Generate a random integer r with equal chance in  min <= r < max.\n  randrange(min, max) {\n    var range = max - min;\n\n    var requestBytes = Math.ceil(Math.log2(range) / 8);\n    if (!requestBytes) { // No randomness required\n        return min;\n    }\n    var maxNum = Math.pow(256, requestBytes);\n    var ar = new Uint8Array(requestBytes);\n\n    while (true) {\n        window.crypto.getRandomValues(ar);\n\n        var val = 0;\n        for (var i = 0;i < requestBytes;i++) {\n            val = (val << 8) + ar[i];\n        }\n\n        if (val < maxNum - maxNum % range) {\n            return min + (val % range);\n        }\n    }\n  }\n\n  passGen = (length, special, exclude) => {\n    /* special characters could include !@#$%^&*()_+ */\n    let pass = \"\"\n    let values = \"ABCDEFGHIJKLMNOPQRSTUVWZYZabcdefghijklmnopqrstuvwxyz1234567890\";\n    let upper = \"ABCDEFGHIJKLMNOPQRSTUVWZYZ\"\n    let lower = \"abcdefghijklmnopqrstuvwxyz\"\n    let digits = \"1234567890\"\n\n    length = parseInt(length)\n    if(isNaN(length)){\n      length = 16\n    }\n    if(!special){\n      special = \"!@#$%^*_|\"\n    }\n\n    for(let c of exclude){\n      values = values.replace(c, '');\n      upper = upper.replace(c, '');\n      lower = lower.replace(c, '');\n      digits = digits.replace(c, '');\n      special = special.replace(c, '');\n    }\n\n    pass += special \n    /* secure at least one uppercase, one lowercase, and one digit in the string */\n    if(upper){\n      pass += upper.charAt(this.randrange(0, upper.length))\n    }\n    if(lower){\n      pass += lower.charAt(this.randrange(0, lower.length))\n    }\n    if(digits){\n      pass += digits.charAt(this.randrange(0, digits.length))\n    }\n\n    let numOtherChars = length - pass.length;\n    // console.log(pass)\n    // console.log(length);\n    // console.log(special);\n    // console.log(numOtherChars);\n    if(numOtherChars >= 0){\n      for(let i = 0; i < numOtherChars; i++){\n        let index = this.randrange(0, values.length);\n        pass = pass + values.charAt(index);\n      }\n      /* shuffle the string */\n      let shuffled = this.shuffle(pass)\n\n      this.setState({\n        password: shuffled,\n        error: ''\n      })\n    }\n    else {\n      this.setState({\n        password: '',\n        error: \"Length is too short for the requirements. Along with the special characters, the generated password will contain at least one uppercase character, one lowercase character, and one digit.\"\n      })      \n    }\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <h3 className=\"center blue-text\">Password Generator</h3>\n        <PassForm passGen={this.passGen}/>\n        <br></br>\n        {this.renderPass(this.state.password)}\n        {\n         /* Logical shortcut for only displaying the \n            button if the copy command exists */\n         document.queryCommandSupported('copy') &&\n         this.state.password &&\n          <div>\n            <button className=\"btn ripple orange darken-3\" onClick={this.copyToClipboard}>\n              Copy <i className=\"material-icons right\">content_copy</i>\n            </button> \n          </div>\n        }\n\n        {this.renderError(this.state.error)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}