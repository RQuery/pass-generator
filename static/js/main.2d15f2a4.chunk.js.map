{"version":3,"sources":["PassForm.js","App.js","serviceWorker.js","index.js"],"names":["PassForm","state","length","special","handleLengthChange","e","setState","target","value","handleSpecialChange","handleSubmit","preventDefault","props","passGen","onSubmit","this","type","min","max","onChange","pattern","className","Component","App","password","error","shuffle","str","a","split","i","j","Math","floor","random","tmp","join","copyToClipboard","textArea","select","document","execCommand","renderPass","pass","readOnly","ref","renderError","values","upper","lower","charAt","numOtherChars","shuffled","queryCommandSupported","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2d15f2a4.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass PassForm extends Component {\n    state = {\n        length: '',\n        special: ''\n    }\n\n    handleLengthChange = (e) => {\n        this.setState({\n            length: e.target.value,\n            special: this.state.special\n        })\n    }\n\n    handleSpecialChange = (e) => {\n        this.setState({\n            length: this.state.length,\n            special: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.passGen(this.state.length, this.state.special);\n    }\n    render() {\n        return (\n            <div>  \n                <form onSubmit={this.handleSubmit}>\n                    <input type=\"number\" min=\"10\" max=\"1000\" onChange={this.handleLengthChange} value={this.state.length}/> \n                    <label>Password length (10-1000):</label>\n\n                    <input type=\"text\" pattern=\"[!@#$%^*_|]*\" onChange={this.handleSpecialChange} value={this.state.special}/> \n                    <label>Special characters (!, @, #, $, %, ^, *, _, |) to include; enter as string sequence, for example, #!@:</label>\n                    <br></br><br></br>\n                    <button className=\"btn waves-effect waves-light orange darken-3\" type=\"submit\" value=\"Submit\">\n                        Submit <i className=\"material-icons right\">send</i>\n                    </button>\n                </form>  \n            </div>\n        );\n    }\n}\n\nexport default PassForm","import React, {Component} from 'react';\nimport PassForm from './PassForm';\n\nclass App extends Component {\n  state = {\n    password: '',\n    error: ''\n  }\n\n  shuffle = (str) => {\n    var a = str.split(\"\"),\n        n = a.length;\n  \n    for(var i = n - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var tmp = a[i];\n        a[i] = a[j];\n        a[j] = tmp;\n    }\n    return a.join(\"\");\n  }\n\n  copyToClipboard = (e) => {\n    this.textArea.select();\n    document.execCommand('copy');\n    // If you prefer to not show the the whole text area selected.\n    //e.target.focus();\n  };\n  \n  renderPass = (pass) => {\n      return pass? \n        <textarea className=\"materialize-textarea\" readOnly ref={(textArea) => this.textArea = textArea} value= {pass} /> : null\n  }\n  renderError = (error) => {\n    return error? <p>{error}</p>: null\n  }\n\n  passGen = (length, special) => {\n    /* special characters could include !@#$%^&*()_+ */\n    let pass = \"\"\n    let values = \"ABCDEFGHIJKLMNOPQRSTUVWZYZabcdefghijklmnopqrstuvwxyz1234567890\";\n    let upper = \"ABCDEFGHIJKLMNOPQRSTUVWZYZ\"\n    let lower = \"abcdefghijklmnopqrstuvwxyz\"\n    let digits = \"1234567890\"\n    pass += special \n    /* secure at least one uppercase, one lowercase, and one digit in the string */\n    pass += upper.charAt(Math.floor(Math.random() * Math.floor(upper.length - 1)))\n    pass += lower.charAt(Math.floor(Math.random() * Math.floor(lower.length - 1)))\n    pass += digits.charAt(Math.floor(Math.random() * Math.floor(digits.length - 1)))\n\n    let numOtherChars = length - pass.length;\n    // console.log(pass)\n    // console.log(length);\n    // console.log(special);\n    // console.log(numOtherChars);\n    if(numOtherChars >= 0){\n      for(let i = 0; i < numOtherChars; i++){\n        pass = pass + values.charAt(Math.floor(Math.random() * Math.floor(values.length - 1)));\n      }\n      /* shuffle the string */\n      let shuffled = this.shuffle(pass)\n\n      this.setState({\n        password: shuffled,\n        error: ''\n      })\n    }\n    else {\n      this.setState({\n        password: '',\n        error: \"Length is too short for the requirements. Along with the special characters, the generated password will contain at least one uppercase character, one lowercase character, and one digit.\"\n      })      \n    }\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <h3 className=\"center blue-text\">Password Generator</h3>\n        <PassForm passGen={this.passGen}/>\n        <br></br>\n        {this.renderPass(this.state.password)}\n        {\n         /* Logical shortcut for only displaying the \n            button if the copy command exists */\n         document.queryCommandSupported('copy') &&\n         this.state.password &&\n          <div>\n            <button className=\"btn waves-effect waves-light orange darken-3\" onClick={this.copyToClipboard}>Copy<i className=\"material-icons right\">content_copy</i></button> \n          </div>\n        }\n\n        {this.renderError(this.state.error)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}